/* Variables globales */
	var numver = "0.1.2";
	var curver = "";
	var db;
	
/* Fonctions */
	 function updateOnlineStatus() {
	   var etat = navigator.onLine ? "online" : "offline";
	   var status = document.getElementById("status");
	   var lnkup = document.getElementById("upgrade");
	   status.src="/images/icon/"+etat+".png";
	   status.alt=etat;
	   if(lnkup){
		   if(etat == "offline"){
				lnkup.style.display = "none";
		   }
		   else{
				lnkup.style.display = "";
		   }
	   }
	   console.log(etat);
	 }
	 
	 function loaded() {
		openDb();
		var version;
		var objectStore = db.transaction("version").objectStore("version");
		objectStore.openCursor().onsuccess = function(event) {
			var cursor = event.target.result;
			if (cursor) {
				curver = cursor.value.numver;
				console.log("récupération version : " + curver);
			}
			else{
				console.log("pas de version courante");
				curver = numver;
				var verObjectStore = db.transaction("version", "readwrite").objectStore("version");
				verObjectStore.add({numver : numver});
			}
			document.getElementsByTagName("footer")[0].innerHTML="Version : " + curver;
			if (curver!=numver) {
				if ("serviceWorker" in navigator) {
					navigator.serviceWorker.controller.postMessage(false);
				}
				console.log("nouvelle version disponible :  "+curver+" -> "+numver);
				document.getElementsByTagName("footer")[0].insertAdjacentHTML("beforeend", "<a href='#' id='upgrade' onclick='upgrade(); return false;'> Cliquez ici pour passer à la version " + numver + "</a>");
				updateOnlineStatus();
			}
		};
	   updateOnlineStatus();
	   window.addEventListener("offline",updateOnlineStatus);
	   window.addEventListener("online",updateOnlineStatus);
	 }
	 
	function openDb() {
		var request = indexedDB.open("testPOC");
		request.onerror = function(event) {
		  console.error("openDb:", event.target.errorCode);
		};
		request.onsuccess = function(event) {
		  db = this.result;
		  console.log("openDb DONE");
		};
		request.onupgradeneeded = function(event) { 
		  console.log("openDb Upgrade");
		  db = this.result;
		  // Crée un objet de stockage pour cette base de données
		  var objectStore = db.createObjectStore("version", { keyPath: "numver" });
			objectStore.transaction.oncomplete = function(evt) {
			// Stocker les valeurs dans le nouvel objet de stockage.
			var verObjectStore = db.transaction("version", "readwrite").objectStore("version");
			verObjectStore.add({numver : numver});
		  }
		};
	}
	
	function upgrade(){
		curver = numver;			
		if ("serviceWorker" in navigator) {
			navigator.serviceWorker.controller.postMessage(true);
		}
		var objectStore = db.transaction("version", "readwrite").objectStore("version");
		var objectStoreRequest = objectStore.clear(); 
		objectStoreRequest.onsuccess = function(event) { 
			window.location.reload();
		}; 
	}
(function () {
	/* IndexDB */
	window.indexedDB = window.indexedDB || window.webkitIndexedDB || window.mozIndexedDB || window.msIndexedDB;

	// Handle the prefix to IDBTransaction/IDBKeyRange.
	window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction;
	window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange

	indexedDB.db = null;
	// Hook up the errors to the console so we could see it.
	// In the future, we need to push these messages to the user.
	indexedDB.onerror = function(e) {
	  console.log(e);
	};

  openDb();
  
})();	 